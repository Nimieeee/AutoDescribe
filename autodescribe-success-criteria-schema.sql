-- AutoDescribe RAG System - Success Criteria Measurement Schema\n-- Database schema for tracking win rate, hallucination rate, time savings, and CTR performance\n\n-- Success Criteria Tracking Tables\n\n-- 1. Approval Metrics (Win Rate Tracking)\nCREATE TABLE IF NOT EXISTS approval_metrics (\n    id SERIAL PRIMARY KEY,\n    content_id VARCHAR(255) NOT NULL,\n    product_sku VARCHAR(100) NOT NULL,\n    editor_id VARCHAR(100),\n    approval_status VARCHAR(50) NOT NULL CHECK (approval_status IN ('approved', 'rejected', 'minor_edits', 'pending')),\n    review_start_time TIMESTAMP NOT NULL,\n    review_end_time TIMESTAMP,\n    review_duration_minutes INTEGER,\n    rejection_reason TEXT,\n    edit_count INTEGER DEFAULT 0,\n    brand_voice_rating INTEGER CHECK (brand_voice_rating >= 1 AND brand_voice_rating <= 5),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 2. Hallucination Detection (Accuracy Tracking)\nCREATE TABLE IF NOT EXISTS hallucination_detection (\n    id SERIAL PRIMARY KEY,\n    content_id VARCHAR(255) NOT NULL,\n    product_sku VARCHAR(100) NOT NULL,\n    detection_type VARCHAR(50) NOT NULL CHECK (detection_type IN ('missing_attribute', 'incorrect_fact', 'unsupported_claim', 'brand_error')),\n    confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),\n    description TEXT NOT NULL,\n    detected_by VARCHAR(50) NOT NULL CHECK (detected_by IN ('automated', 'human', 'hybrid')),\n    human_verified BOOLEAN DEFAULT FALSE,\n    false_positive BOOLEAN DEFAULT FALSE,\n    severity VARCHAR(20) CHECK (severity IN ('low', 'medium', 'high', 'critical')),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    resolved_at TIMESTAMP\n);\n\n-- 3. Efficiency Metrics (Time Savings Tracking)\nCREATE TABLE IF NOT EXISTS efficiency_metrics (\n    id SERIAL PRIMARY KEY,\n    product_sku VARCHAR(100) NOT NULL,\n    content_type VARCHAR(50) NOT NULL,\n    manual_baseline_minutes INTEGER NOT NULL,\n    ai_generation_seconds INTEGER NOT NULL,\n    human_review_minutes INTEGER NOT NULL,\n    total_ai_workflow_minutes INTEGER NOT NULL,\n    time_savings_percentage DECIMAL(5,2) NOT NULL,\n    productivity_gain DECIMAL(5,2) NOT NULL,\n    editor_id VARCHAR(100),\n    session_id VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 4. CTR Performance Testing (A/B Test Results)\nCREATE TABLE IF NOT EXISTS ctr_test_results (\n    id SERIAL PRIMARY KEY,\n    test_id VARCHAR(255) NOT NULL UNIQUE,\n    product_sku VARCHAR(100) NOT NULL,\n    control_content TEXT NOT NULL,\n    variant_content TEXT NOT NULL,\n    control_ctr DECIMAL(5,4) NOT NULL,\n    variant_ctr DECIMAL(5,4) NOT NULL,\n    ctr_lift_percentage DECIMAL(5,2) NOT NULL,\n    statistical_significance DECIMAL(5,4),\n    sample_size INTEGER NOT NULL,\n    test_start_date DATE NOT NULL,\n    test_end_date DATE,\n    test_duration_days INTEGER,\n    test_status VARCHAR(20) CHECK (test_status IN ('running', 'completed', 'paused', 'cancelled')),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 5. Real-time KPI Dashboard Data\nCREATE TABLE IF NOT EXISTS kpi_dashboard_metrics (\n    id SERIAL PRIMARY KEY,\n    metric_date DATE NOT NULL,\n    win_rate DECIMAL(5,2) NOT NULL,\n    hallucination_rate DECIMAL(5,2) NOT NULL,\n    average_time_savings DECIMAL(5,2) NOT NULL,\n    average_ctr_lift DECIMAL(5,2),\n    total_content_generated INTEGER NOT NULL,\n    total_content_approved INTEGER NOT NULL,\n    total_content_rejected INTEGER NOT NULL,\n    average_quality_score DECIMAL(3,2),\n    productivity_multiplier DECIMAL(4,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(metric_date)\n);\n\n-- 6. ROI Calculation Data\nCREATE TABLE IF NOT EXISTS roi_metrics (\n    id SERIAL PRIMARY KEY,\n    calculation_date DATE NOT NULL,\n    monthly_skus_processed INTEGER NOT NULL,\n    manual_cost_per_sku DECIMAL(8,2) NOT NULL,\n    ai_cost_per_sku DECIMAL(8,2) NOT NULL,\n    monthly_cost_savings DECIMAL(10,2) NOT NULL,\n    quality_improvement_value DECIMAL(10,2),\n    total_monthly_roi DECIMAL(10,2) NOT NULL,\n    payback_period_months DECIMAL(4,2),\n    annual_savings_projection DECIMAL(12,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(calculation_date)\n);\n\n-- 7. Performance Alerts and Notifications\nCREATE TABLE IF NOT EXISTS performance_alerts (\n    id SERIAL PRIMARY KEY,\n    alert_type VARCHAR(50) NOT NULL CHECK (alert_type IN ('win_rate_drop', 'hallucination_spike', 'time_savings_decline', 'ctr_performance_drop', 'system_error')),\n    severity VARCHAR(20) NOT NULL CHECK (severity IN ('info', 'warning', 'critical')),\n    metric_value DECIMAL(10,4) NOT NULL,\n    threshold_value DECIMAL(10,4) NOT NULL,\n    message TEXT NOT NULL,\n    acknowledged BOOLEAN DEFAULT FALSE,\n    acknowledged_by VARCHAR(100),\n    acknowledged_at TIMESTAMP,\n    resolved BOOLEAN DEFAULT FALSE,\n    resolved_at TIMESTAMP,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 8. Content Quality Scores (Detailed Tracking)\nCREATE TABLE IF NOT EXISTS content_quality_scores (\n    id SERIAL PRIMARY KEY,\n    content_id VARCHAR(255) NOT NULL,\n    product_sku VARCHAR(100) NOT NULL,\n    overall_score DECIMAL(3,2) NOT NULL CHECK (overall_score >= 0 AND overall_score <= 5),\n    attribute_coverage DECIMAL(3,2) NOT NULL,\n    readability_score DECIMAL(4,2) NOT NULL,\n    seo_keyword_coverage DECIMAL(5,2) NOT NULL,\n    brand_voice_consistency DECIMAL(3,2) NOT NULL,\n    technical_accuracy DECIMAL(3,2) NOT NULL,\n    emotional_appeal DECIMAL(3,2) NOT NULL,\n    calculated_by VARCHAR(50) NOT NULL CHECK (calculated_by IN ('automated', 'human', 'hybrid')),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Indexes for Performance\nCREATE INDEX idx_approval_metrics_sku ON approval_metrics(product_sku);\nCREATE INDEX idx_approval_metrics_status ON approval_metrics(approval_status);\nCREATE INDEX idx_approval_metrics_date ON approval_metrics(created_at);\n\nCREATE INDEX idx_hallucination_detection_sku ON hallucination_detection(product_sku);\nCREATE INDEX idx_hallucination_detection_type ON hallucination_detection(detection_type);\nCREATE INDEX idx_hallucination_detection_date ON hallucination_detection(created_at);\n\nCREATE INDEX idx_efficiency_metrics_sku ON efficiency_metrics(product_sku);\nCREATE INDEX idx_efficiency_metrics_date ON efficiency_metrics(created_at);\n\nCREATE INDEX idx_ctr_test_results_sku ON ctr_test_results(product_sku);\nCREATE INDEX idx_ctr_test_results_status ON ctr_test_results(test_status);\n\nCREATE INDEX idx_kpi_dashboard_date ON kpi_dashboard_metrics(metric_date);\nCREATE INDEX idx_roi_metrics_date ON roi_metrics(calculation_date);\n\nCREATE INDEX idx_performance_alerts_type ON performance_alerts(alert_type);\nCREATE INDEX idx_performance_alerts_severity ON performance_alerts(severity);\nCREATE INDEX idx_performance_alerts_date ON performance_alerts(created_at);\n\nCREATE INDEX idx_content_quality_sku ON content_quality_scores(product_sku);\nCREATE INDEX idx_content_quality_date ON content_quality_scores(created_at);\n\n-- Views for Easy Querying\n\n-- Current Win Rate View\nCREATE OR REPLACE VIEW current_win_rate AS\nSELECT \n    COUNT(*) as total_reviews,\n    COUNT(CASE WHEN approval_status IN ('approved', 'minor_edits') THEN 1 END) as wins,\n    ROUND(\n        (COUNT(CASE WHEN approval_status IN ('approved', 'minor_edits') THEN 1 END) * 100.0 / COUNT(*)), \n        2\n    ) as win_rate_percentage\nFROM approval_metrics \nWHERE created_at >= CURRENT_DATE - INTERVAL '30 days';\n\n-- Current Hallucination Rate View\nCREATE OR REPLACE VIEW current_hallucination_rate AS\nSELECT \n    COUNT(DISTINCT h.content_id) as content_with_hallucinations,\n    COUNT(DISTINCT a.content_id) as total_content_reviewed,\n    ROUND(\n        (COUNT(DISTINCT h.content_id) * 100.0 / NULLIF(COUNT(DISTINCT a.content_id), 0)), \n        2\n    ) as hallucination_rate_percentage\nFROM hallucination_detection h\nRIGHT JOIN approval_metrics a ON h.content_id = a.content_id\nWHERE a.created_at >= CURRENT_DATE - INTERVAL '30 days'\n    AND (h.false_positive = FALSE OR h.false_positive IS NULL);\n\n-- Average Time Savings View\nCREATE OR REPLACE VIEW current_time_savings AS\nSELECT \n    COUNT(*) as total_content,\n    ROUND(AVG(time_savings_percentage), 2) as average_time_savings,\n    ROUND(AVG(productivity_gain), 2) as average_productivity_gain\nFROM efficiency_metrics \nWHERE created_at >= CURRENT_DATE - INTERVAL '30 days';\n\n-- Average CTR Lift View\nCREATE OR REPLACE VIEW current_ctr_performance AS\nSELECT \n    COUNT(*) as total_tests,\n    ROUND(AVG(ctr_lift_percentage), 2) as average_ctr_lift,\n    COUNT(CASE WHEN ctr_lift_percentage >= 10 THEN 1 END) as tests_meeting_target\nFROM ctr_test_results \nWHERE test_status = 'completed'\n    AND test_end_date >= CURRENT_DATE - INTERVAL '30 days';\n\n-- Success Criteria Summary View\nCREATE OR REPLACE VIEW success_criteria_summary AS\nSELECT \n    'Win Rate' as metric,\n    '≥75%' as target,\n    COALESCE((SELECT win_rate_percentage FROM current_win_rate), 0) as current_value,\n    CASE \n        WHEN COALESCE((SELECT win_rate_percentage FROM current_win_rate), 0) >= 75 \n        THEN 'ACHIEVED' \n        ELSE 'MISSED' \n    END as status\nUNION ALL\nSELECT \n    'Hallucination Rate' as metric,\n    '≤5%' as target,\n    COALESCE((SELECT hallucination_rate_percentage FROM current_hallucination_rate), 0) as current_value,\n    CASE \n        WHEN COALESCE((SELECT hallucination_rate_percentage FROM current_hallucination_rate), 0) <= 5 \n        THEN 'ACHIEVED' \n        ELSE 'MISSED' \n    END as status\nUNION ALL\nSELECT \n    'Time Savings' as metric,\n    '≥60%' as target,\n    COALESCE((SELECT average_time_savings FROM current_time_savings), 0) as current_value,\n    CASE \n        WHEN COALESCE((SELECT average_time_savings FROM current_time_savings), 0) >= 60 \n        THEN 'ACHIEVED' \n        ELSE 'MISSED' \n    END as status\nUNION ALL\nSELECT \n    'CTR Lift' as metric,\n    '≥10%' as target,\n    COALESCE((SELECT average_ctr_lift FROM current_ctr_performance), 0) as current_value,\n    CASE \n        WHEN COALESCE((SELECT average_ctr_lift FROM current_ctr_performance), 0) >= 10 \n        THEN 'ACHIEVED' \n        ELSE 'MISSED' \n    END as status;\n\n-- Triggers for Automatic KPI Updates\n\n-- Function to update daily KPI metrics\nCREATE OR REPLACE FUNCTION update_daily_kpi_metrics()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO kpi_dashboard_metrics (\n        metric_date,\n        win_rate,\n        hallucination_rate,\n        average_time_savings,\n        average_ctr_lift,\n        total_content_generated,\n        total_content_approved,\n        total_content_rejected,\n        average_quality_score,\n        productivity_multiplier\n    )\n    SELECT \n        CURRENT_DATE,\n        COALESCE((SELECT win_rate_percentage FROM current_win_rate), 0),\n        COALESCE((SELECT hallucination_rate_percentage FROM current_hallucination_rate), 0),\n        COALESCE((SELECT average_time_savings FROM current_time_savings), 0),\n        COALESCE((SELECT average_ctr_lift FROM current_ctr_performance), 0),\n        (SELECT COUNT(*) FROM approval_metrics WHERE DATE(created_at) = CURRENT_DATE),\n        (SELECT COUNT(*) FROM approval_metrics WHERE DATE(created_at) = CURRENT_DATE AND approval_status = 'approved'),\n        (SELECT COUNT(*) FROM approval_metrics WHERE DATE(created_at) = CURRENT_DATE AND approval_status = 'rejected'),\n        (SELECT ROUND(AVG(overall_score), 2) FROM content_quality_scores WHERE DATE(created_at) = CURRENT_DATE),\n        COALESCE((SELECT average_productivity_gain FROM current_time_savings), 0)\n    ON CONFLICT (metric_date) DO UPDATE SET\n        win_rate = EXCLUDED.win_rate,\n        hallucination_rate = EXCLUDED.hallucination_rate,\n        average_time_savings = EXCLUDED.average_time_savings,\n        average_ctr_lift = EXCLUDED.average_ctr_lift,\n        total_content_generated = EXCLUDED.total_content_generated,\n        total_content_approved = EXCLUDED.total_content_approved,\n        total_content_rejected = EXCLUDED.total_content_rejected,\n        average_quality_score = EXCLUDED.average_quality_score,\n        productivity_multiplier = EXCLUDED.productivity_multiplier;\n    \n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Function to check performance thresholds and create alerts\nCREATE OR REPLACE FUNCTION check_performance_thresholds()\nRETURNS TRIGGER AS $$\nDECLARE\n    current_win_rate DECIMAL(5,2);\n    current_hallucination_rate DECIMAL(5,2);\n    current_time_savings DECIMAL(5,2);\nBEGIN\n    -- Get current metrics\n    SELECT win_rate_percentage INTO current_win_rate FROM current_win_rate;\n    SELECT hallucination_rate_percentage INTO current_hallucination_rate FROM current_hallucination_rate;\n    SELECT average_time_savings INTO current_time_savings FROM current_time_savings;\n    \n    -- Check win rate threshold (warning at 70%, critical at 65%)\n    IF current_win_rate < 65 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('win_rate_drop', 'critical', current_win_rate, 75, \n                'Win rate critically low: ' || current_win_rate || '% (Target: ≥75%)');\n    ELSIF current_win_rate < 70 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('win_rate_drop', 'warning', current_win_rate, 75, \n                'Win rate below warning threshold: ' || current_win_rate || '% (Target: ≥75%)');\n    END IF;\n    \n    -- Check hallucination rate threshold (warning at 7%, critical at 10%)\n    IF current_hallucination_rate > 10 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('hallucination_spike', 'critical', current_hallucination_rate, 5, \n                'Hallucination rate critically high: ' || current_hallucination_rate || '% (Target: ≤5%)');\n    ELSIF current_hallucination_rate > 7 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('hallucination_spike', 'warning', current_hallucination_rate, 5, \n                'Hallucination rate above warning threshold: ' || current_hallucination_rate || '% (Target: ≤5%)');\n    END IF;\n    \n    -- Check time savings threshold (warning at 50%, critical at 40%)\n    IF current_time_savings < 40 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('time_savings_decline', 'critical', current_time_savings, 60, \n                'Time savings critically low: ' || current_time_savings || '% (Target: ≥60%)');\n    ELSIF current_time_savings < 50 THEN\n        INSERT INTO performance_alerts (alert_type, severity, metric_value, threshold_value, message)\n        VALUES ('time_savings_decline', 'warning', current_time_savings, 60, \n                'Time savings below warning threshold: ' || current_time_savings || '% (Target: ≥60%)');\n    END IF;\n    \n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Triggers\nCREATE TRIGGER trigger_update_daily_kpi_metrics\n    AFTER INSERT OR UPDATE ON approval_metrics\n    FOR EACH ROW\n    EXECUTE FUNCTION update_daily_kpi_metrics();\n\nCREATE TRIGGER trigger_check_performance_thresholds\n    AFTER INSERT OR UPDATE ON approval_metrics\n    FOR EACH ROW\n    EXECUTE FUNCTION check_performance_thresholds();\n\n-- Initial data for testing\nINSERT INTO kpi_dashboard_metrics (metric_date, win_rate, hallucination_rate, average_time_savings, average_ctr_lift, total_content_generated, total_content_approved, total_content_rejected, average_quality_score, productivity_multiplier)\nVALUES (CURRENT_DATE, 0, 0, 0, 0, 0, 0, 0, 0, 0)\nON CONFLICT (metric_date) DO NOTHING;\n\nCOMMIT;"