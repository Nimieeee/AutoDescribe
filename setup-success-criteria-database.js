#!/usr/bin/env node\n\n/**\n * Setup Success Criteria Database\n * Creates all necessary tables and indexes for success criteria tracking\n */\n\nconst { Pool } = require('pg');\nconst fs = require('fs');\nrequire('dotenv').config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function setupSuccessCriteriaDatabase() {\n  console.log('🗄️ Setting up Success Criteria Database...');\n  console.log('=' .repeat(60));\n  \n  try {\n    // Read the schema file\n    const schemaSQL = fs.readFileSync('autodescribe-success-criteria-schema.sql', 'utf8');\n    \n    console.log('📋 Executing database schema...');\n    \n    // Split the schema into individual statements\n    const statements = schemaSQL\n      .split(';')\n      .map(stmt => stmt.trim())\n      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n    \n    let successCount = 0;\n    let errorCount = 0;\n    \n    for (const statement of statements) {\n      try {\n        if (statement.toLowerCase().includes('commit')) {\n          continue; // Skip COMMIT statements in individual execution\n        }\n        \n        await pool.query(statement);\n        successCount++;\n        \n        // Log major operations\n        if (statement.toLowerCase().includes('create table')) {\n          const tableName = statement.match(/create table[^\\s]*\\s+([^\\s(]+)/i)?.[1];\n          console.log(`✅ Created table: ${tableName}`);\n        } else if (statement.toLowerCase().includes('create index')) {\n          const indexName = statement.match(/create index[^\\s]*\\s+([^\\s]+)/i)?.[1];\n          console.log(`📊 Created index: ${indexName}`);\n        } else if (statement.toLowerCase().includes('create or replace view')) {\n          const viewName = statement.match(/create or replace view\\s+([^\\s]+)/i)?.[1];\n          console.log(`👁️ Created view: ${viewName}`);\n        } else if (statement.toLowerCase().includes('create or replace function')) {\n          const funcName = statement.match(/create or replace function\\s+([^\\s(]+)/i)?.[1];\n          console.log(`⚙️ Created function: ${funcName}`);\n        } else if (statement.toLowerCase().includes('create trigger')) {\n          const triggerName = statement.match(/create trigger\\s+([^\\s]+)/i)?.[1];\n          console.log(`🔄 Created trigger: ${triggerName}`);\n        }\n      } catch (error) {\n        errorCount++;\n        if (!error.message.includes('already exists')) {\n          console.log(`⚠️ Warning: ${error.message.split('\\n')[0]}`);\n        }\n      }\n    }\n    \n    console.log('\\n📊 Database Setup Summary:');\n    console.log(`✅ Successful operations: ${successCount}`);\n    console.log(`⚠️ Warnings/Skipped: ${errorCount}`);\n    \n    // Verify the setup by checking key tables\n    await verifySetup();\n    \n    console.log('\\n🎉 Success Criteria Database setup complete!');\n    console.log('\\n📋 Available tables:');\n    console.log('   • approval_metrics (win rate tracking)');\n    console.log('   • hallucination_detection (accuracy tracking)');\n    console.log('   • efficiency_metrics (time savings tracking)');\n    console.log('   • ctr_test_results (CTR performance tracking)');\n    console.log('   • kpi_dashboard_metrics (real-time KPI data)');\n    console.log('   • roi_metrics (business impact calculation)');\n    console.log('   • performance_alerts (automated alerting)');\n    console.log('   • content_quality_scores (quality assessment)');\n    \n    console.log('\\n🔍 Available views:');\n    console.log('   • current_win_rate');\n    console.log('   • current_hallucination_rate');\n    console.log('   • current_time_savings');\n    console.log('   • current_ctr_performance');\n    console.log('   • success_criteria_summary');\n    \n  } catch (error) {\n    console.error('❌ Database setup failed:', error.message);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\nasync function verifySetup() {\n  console.log('\\n🔍 Verifying database setup...');\n  \n  const tablesToCheck = [\n    'approval_metrics',\n    'hallucination_detection', \n    'efficiency_metrics',\n    'ctr_test_results',\n    'kpi_dashboard_metrics',\n    'roi_metrics',\n    'performance_alerts',\n    'content_quality_scores'\n  ];\n  \n  for (const table of tablesToCheck) {\n    try {\n      const result = await pool.query(`SELECT COUNT(*) FROM ${table}`);\n      console.log(`✅ Table ${table}: ${result.rows[0].count} records`);\n    } catch (error) {\n      console.log(`❌ Table ${table}: ERROR - ${error.message}`);\n    }\n  }\n  \n  // Test the views\n  const viewsToCheck = [\n    'current_win_rate',\n    'current_hallucination_rate',\n    'current_time_savings',\n    'success_criteria_summary'\n  ];\n  \n  console.log('\\n👁️ Checking views...');\n  for (const view of viewsToCheck) {\n    try {\n      const result = await pool.query(`SELECT * FROM ${view} LIMIT 1`);\n      console.log(`✅ View ${view}: Working`);\n    } catch (error) {\n      console.log(`❌ View ${view}: ERROR - ${error.message}`);\n    }\n  }\n}\n\n// Handle process termination\nprocess.on('SIGINT', async () => {\n  console.log('\\n\\n⚠️ Setup interrupted by user');\n  await pool.end();\n  process.exit(0);\n});\n\n// Run the setup\nsetupSuccessCriteriaDatabase().catch(async (error) => {\n  console.error('❌ Setup failed:', error);\n  await pool.end();\n  process.exit(1);\n});"